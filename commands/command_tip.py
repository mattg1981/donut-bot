import re
import sqlite3

from commands import shared
from commands.command import Command


class TipCommand(Command):
    VERSION = 'v0.1.20231027-tip'
    COMMENT_SIGNATURE = f'\n\n^(This output was generated by donut-bot {VERSION})'
    VALID_TOKENS = ['Donut']

    def __init__(self):
        super(TipCommand, self).__init__()
        self.command_text = "!tip"

    def get_address_for_user(self, author):
        result = None
        try:
            with sqlite3.connect(super().get_db_path()) as db:
                cursor = db.cursor()
                cursor.execute("SELECT address FROM registered_users WHERE username=?", [author])
                result = cursor.fetchone()
        except Exception as e:
            self.logger.error(e)

        return result

    def process_earn2tip(self, user_address, author_address, amount, token, content_id, community):
        tip_totals = None
        try:
            with sqlite3.connect(super().get_db_path()) as db:
                cursor = db.cursor()
                cursor.execute("INSERT INTO earn2tip (from_address, to_address, amount, token, content_id, community) "
                               "VALUES (?, ?, ?, ?, ?, ?)", [user_address, author_address, amount, token,
                                                               content_id, community])

                cursor.execute("SELECT distribution_round from main.distribution_rounds where DATE() > from_date and "
                               "DATE() < to_date")
                dist_round = cursor.fetchone()[0]
                cursor.execute(
                    "SELECT from_address, token, count(id) 'count', sum(amount) 'amount' FROM earn2tip WHERE "
                    "distribution_round = ? and from_address = ?"
                    "GROUP BY from_address, token", [dist_round, user_address])

                tip_totals = cursor.fetchall()
        except Exception as e:
            self.logger.error(e)

        return tip_totals

    def leave_comment_reply(self, comment, reply):
        reply += self.COMMENT_SIGNATURE
        comment.reply(reply)
        comment.save()

    def process_command(self, comment):
        if comment.saved or comment.author.name.lower() == shared.Me:
            return

        parent = comment.parent()
        author = parent.author.name
        user_address = self.get_address_for_user(comment.author.name)
        author_address = self.get_address_for_user(author)

        if not user_address:
            self.leave_comment_reply(comment, f"Cannot tip u/{author} - you are not registered")
            return

        if not author_address:
            self.leave_comment_reply(comment, f"Cannot tip u/{author} - that user is not registered")
            return

        user_address = self.get_address_for_user(comment.author.name)[0]
        author_address = self.get_address_for_user(author)[0]

        # if user_address == author_address:
        #     self.leave_comment_reply(comment, f"Sorry u/{comment.author.name}, you cannot tip yourself!")
        #     return

        # determine if its earn2tip
        p = re.compile(f'{self.command_text}\s+([0-9]*\.*[0-9]*)\s+(\w+)\\b')
        re_result = p.match(comment.body.lower())
        if re_result:
            amount = re_result.group(1)
            token = re_result.group(2)

            if token not in self.VALID_TOKENS:
                self.leave_comment_reply(comment, f"Sorry u/{comment.author.name}, {token} is not a valid token!")
                return

            if amount[-1] == '.':
                amount = amount[0:-1]

            tips = self.process_earn2tip(user_address, author_address, amount, token, comment.fullname, comment.subreddit.display_name)
            tip_text = ""
            for tip in tips:
                tip_text += f" {tip[3]} {tip[1]},"

            tip_text = tip_text[:-1]

            comment_reply = f"u/{comment.author.name} has tipped u/{parent.author.name} {amount} {token}"
            comment_reply += f"\n\n{comment.author.name} has tipped {tip_text} this round"
        else:
            # just !tip
            content_id = parent.fullname
            desktop_link = f"https://www.donut.finance/tip/?action=tip&contentId={content_id}"

            if content_id[:3] == "t1_":
                desktop_link += f"&recipient={author}&address={author_address}"

            mobile_link = f"https://metamask.app.link/dapp/{desktop_link}"

            comment_reply = f"**[Leave a tip]** [Desktop]({desktop_link}) | [Mobile (Metamask Only)]({mobile_link})"
            comment_reply += ("\n\n*The mobile link works best if you use the "
                              "System Default Browser in the Reddit Client (Settings > Open Links > Default Browser)*")

        self.leave_comment_reply(comment, comment_reply)
