import datetime

from datetime import datetime

from commands import shared
from commands.command import Command
import re
import sqlite3


class RegisterCommand(Command):

    VERSION = 'v0.1.20231027-reg'
    COMMENT_SIGNATURE = f'\n\n^(This output was generated by donut-bot {VERSION})'

    def __init__(self):
        super(RegisterCommand, self).__init__()
        self.command_text = "!register"

    def get_user_address(self, user):
        result = None
        try:
            with sqlite3.connect(super().get_db_path()) as db:
                self.logger.info(f"getting registration status for: {user}...")
                cursor = db.cursor()
                cursor.execute("SELECT address FROM registered_users WHERE username=?", [user])
                result = cursor.fetchone()
        except Exception as e:
            self.logger.error(e)

        return result

    def set_user_address(self, user, address, content_id):
        result = None
        try:
            self.logger.info(f"attempting to register {user} with wallet ...{address[len(address)-5]}")
            with sqlite3.connect(super().get_db_path()) as db:
                cursor = db.cursor()
                cursor.execute("SELECT id from registered_users where username=?", [user])
                exists = cursor.fetchone()

                if exists:
                    self.logger.info(f"  {user} exists, updating...")
                    cursor.execute(
                        "UPDATE registered_users SET address=?, content_id=?, last_updated=? WHERE username=? "
                        "RETURNING *", [address, content_id, datetime.now(), user])
                else:
                    self.logger.info(f"  {user} not found, inserting...")
                    cursor.execute(
                        "INSERT INTO registered_users (username, address, content_id) VALUES (?,?,?) RETURNING *",
                        [user, address, content_id])

                self.logger.info("  success...")
                result = cursor.fetchone()
        except Exception as e:
            self.logger.error(e)

        return result

    def process_command(self, comment):
        if comment.saved or comment.author.name.lower() == shared.Me:
            return

        user = comment.author.name

        if f'{self.command_text} status' in comment.body.lower():
            # handle `!register status` command
            address = self.get_user_address(user)

            if address:
                reply_comment = f'u/{user} is registered with the following address: `{address[0]}`'
            else:
                reply_comment = (f'u/{user} is not registered.  Please use the `{self.command_text} <address>` command '
                                 f'to register your wallet address.')
        else:
            p = re.compile(f'{self.command_text}\s+(0x[a-fA-F0-9]{{40}})\\b')
            re_result = p.match(comment.body)
            if re_result:
                address = re_result.group(1)
                result = self.set_user_address(user, address, comment.name)
                if result:
                    reply_comment = f'u/{user} successfully registered with the following address: `{address}`'
                else:
                    reply_comment = f'Unable to register at this time.  Please try again later.'
            else:
                reply_comment = (f"Invalid address.  Please ensure the address is in the format '0x' followed by 40 "
                                 f"hexadecimal characters")

        reply_comment += self.COMMENT_SIGNATURE
        comment.reply(reply_comment)
        comment.save()
